# -*- coding: utf-8 -*
import numpy as np
import os
import matplotlib.pyplot as plt

def Vnbl(Dict_Vln, Path_Out_Step_4, Path_Out_Step_5, show=False):
    Path_PoE = Path_Out_Step_4 + '/PoE'
    IM = np.loadtxt(Path_PoE + '/IM.txt')
    SimNum = Dict_Vln['Num_RS'][0]
    Path_Vnbl = Path_Out_Step_5
    if not os.path.isdir(Path_Vnbl):
        os.mkdir(Path_Vnbl)

    Frgl_TS = np.loadtxt(Path_PoE + '/Frgl_TS.txt')

    if Dict_Vln['Frgl_Bld'][0] == 1:
        Frgl_B = np.loadtxt(Path_PoE + '/Frgl_B.txt')
        Num_B = np.size(Frgl_B, axis=1)
        LR_B = np.array(Dict_Vln['LossR_Bld'])
        Vnbl_B = np.zeros([len(IM), 1])

    if Dict_Vln['Frgl_Nac'][0] == 1:
        Frgl_N = np.loadtxt(Path_PoE + '/Frgl_N.txt')
        Num_N = np.size(Frgl_N, axis=1)
        LR_N = np.array(Dict_Vln['LossR_Nac'])
        Vnbl_N = np.zeros([len(IM), 1])

    if Dict_Vln['Frgl_Twr'][0] == 1:
        Frgl_T = np.loadtxt(Path_PoE + '/Frgl_T.txt')
        Num_T = np.size(Frgl_T, axis=1)
        LR_T = np.array(Dict_Vln['LossR_Twr'])
        Vnbl_T = np.zeros([len(IM), 1])

    if Dict_Vln['Frgl_Sub'][0] == 1:
        Frgl_S = np.loadtxt(Path_PoE + '/Frgl_S.txt')
        Num_S = np.size(Frgl_S, axis=1)
        LR_S = np.array(Dict_Vln['LossR_Mop'])
        Vnbl_S = np.zeros([len(IM), 1])


    for ii in range(len(IM)):
        for jj in range(SimNum):
            TS = Sim_TS(Frgl_TS[ii])

            if Dict_Vln['Frgl_Bld'][0] == 1:
                Loss_B, LS_B, Le_B = Sim_Loss(Frgl_B[ii, :], Num_B, LR_B)

            if Dict_Vln['Frgl_Nac'][0] == 1:
                Loss_N, LS_N, Le_N = Sim_Loss(Frgl_N[ii, :], Num_N, LR_N)

            if Dict_Vln['Frgl_Twr'][0] == 1:
                Loss_T, LS_T, Le_T = Sim_Loss(Frgl_T[ii, :], Num_T, LR_T)

            if Dict_Vln['Frgl_Sub'][0] == 1:
                Loss_S, LS_S, Le_S = Sim_Loss(Frgl_S[ii, :], Num_S, LR_S)

            # Dependency of blade
            if Dict_Vln['Frgl_Bld'][0] == 1 and Dict_Vln['Dep_Bld'][0] == 1:
                if TS == 1:
                    Loss_B = LS_B
                if Dict_Vln['Frgl_Nac'][0] == 1 and Le_N == Num_N:
                    Loss_B = LS_B
                if Dict_Vln['Frgl_Twr'][0] == 1 and Le_T == Num_T:
                    Loss_B = LS_B
                if Dict_Vln['Frgl_Sub'][0] == 1 and Le_S == Num_S:
                    Loss_B = LS_B

            # Dependency of nacelle
            if Dict_Vln['Frgl_Nac'][0] == 1 and Dict_Vln['Dep_Nac'][0] == 1:
                if Dict_Vln['Frgl_Twr'][0] == 1 and Le_T == Num_T:
                    Loss_N = LS_N
                if Dict_Vln['Frgl_Sub'][0] == 1 and Le_S == Num_S:
                    Loss_N = LS_N

            # Dependency of tower
            if Dict_Vln['Frgl_Twr'][0] == 1 and Dict_Vln['Dep_Twr'][0] == 1:
                if TS == 1:
                    Loss_T = LS_T
                if Dict_Vln['Frgl_Sub'][0] == 1 and Le_S == Num_S:
                    Loss_S = LS_S

            if Dict_Vln['Frgl_Bld'][0] == 1:
                Vnbl_B[ii] += Loss_B / SimNum

            if Dict_Vln['Frgl_Nac'][0] == 1:
                Vnbl_N[ii] += Loss_N / SimNum

            if Dict_Vln['Frgl_Twr'][0] == 1:
                Vnbl_T[ii] += Loss_T / SimNum

            if Dict_Vln['Frgl_Sub'][0] == 1:
                Vnbl_S[ii] += Loss_S / SimNum

    if Dict_Vln['Frgl_Bld'][0] == 1:
        # Vnbl_B = MA2(Vnbl_B)
        np.savetxt(Path_Vnbl + '/Vnbl_B.txt', Vnbl_B, delimiter=' ')

    if Dict_Vln['Frgl_Nac'][0] == 1:
        # Vnbl_N = MA2(Vnbl_N)
        np.savetxt(Path_Vnbl + '/Vnbl_N.txt', Vnbl_N, delimiter=' ')

    if Dict_Vln['Frgl_Twr'][0] == 1:
        # Vnbl_T = MA2(Vnbl_T)
        np.savetxt(Path_Vnbl + '/Vnbl_T.txt', Vnbl_T, delimiter=' ')

    if Dict_Vln['Frgl_Sub'][0] == 1:
        # Vnbl_S = MA2(Vnbl_S)
        np.savetxt(Path_Vnbl + '/Vnbl_S.txt', Vnbl_S, delimiter=' ')

    np.savetxt(Path_Vnbl + '/IM.txt', IM, delimiter=' ')

    if not show: return

    if Dict_Vln['Frgl_Bld'][0] == 1:
        plt.figure()
        plt.plot(IM, Vnbl_B, linewidth=2)
        plt.ylim((-0.05, 1.05))
        plt.xticks(fontsize=15)
        plt.yticks(np.arange(0, 1.1, 0.1), fontsize=15)
        plt.xlabel('Wind speed (m/s)', fontsize=15)
        plt.ylabel('Fragility', fontsize=15)
        plt.title('Blade', fontsize=15)
        plt.show()

    if Dict_Vln['Frgl_Nac'][0] == 1:
        plt.figure()
        plt.plot(IM, Vnbl_N, linewidth=2)
        plt.ylim((-0.05, 1.05))
        plt.xticks(fontsize=15)
        plt.yticks(np.arange(0, 1.1, 0.1), fontsize=15)
        plt.xlabel('Wind speed (m/s)', fontsize=15)
        plt.ylabel('Fragility', fontsize=15)
        plt.title('Nacelle', fontsize=15)
        plt.show()

    if Dict_Vln['Frgl_Twr'][0] == 1:
        plt.figure()
        plt.plot(IM, Vnbl_T, linewidth=2)
        plt.ylim((-0.05, 1.05))
        plt.xticks(fontsize=15)
        plt.yticks(np.arange(0, 1.1, 0.1), fontsize=15)
        plt.xlabel('Wind speed (m/s)', fontsize=15)
        plt.ylabel('Fragility', fontsize=15)
        plt.title('Tower', fontsize=15)
        plt.show()

    if Dict_Vln['Frgl_Sub'][0] == 1:
        plt.figure()
        plt.plot(IM, Vnbl_S, linewidth=2)
        plt.ylim((-0.05, 1.05))
        plt.xticks(fontsize=15)
        plt.yticks(np.arange(0, 1.1, 0.1), fontsize=15)
        plt.xlabel('Wind speed (m/s)', fontsize=15)
        plt.ylabel('Fragility', fontsize=15)
        plt.title('Substructure', fontsize=15)
        plt.show()




def Sim_TS(Frgl_TS):
    SimulatedProb = np.random.random(1)
    if SimulatedProb > Frgl_TS:
        TS = 0
    else:
        TS = 1
    return TS

def Sim_Loss(Frgl, Num_DS, LR):
    SimulatedProb = np.random.random(1)
    Count = 0
    Loss_S = LR[-2] + (LR[-1] - LR[-2]) * np.random.random(1)

    for i in range(Num_DS):
        if SimulatedProb < Frgl[i]:
            Count += 1

    if Count == 0:
        Loss = 0
    else:
        Loss = LR[Count-1] + (LR[Count] - LR[Count-1])*np.random.random(1)
    return Loss, Loss_S, Count

def MA2(Array):
    window = 7
    Array_new = Array
    for i in range(len(Array) - int(window-1)):
        Array_new[i + int((window-1)/2)] = np.sum(Array_new[i:window])
    for i in range(len(Array) - int(window-1)):
        Array_new[i + int((window-1)/2)] = np.sum(Array_new[i:window])
    return Array_new
